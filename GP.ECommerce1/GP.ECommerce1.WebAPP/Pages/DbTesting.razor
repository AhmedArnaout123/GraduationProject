@page "/DbTesting"
@using GP.ECommerce1.BlazorWebApp.Services.ClientServices
@using GP.ECommerce1.BlazorWebApp.Models
@using GP.ECommerce1.BlazorWebApp.Pages.Components
@using System.Drawing

@inject DbTestingClientService _dbTestingClientService

<div class="container mt-5">
    <div class="d-flex justify-content-between">
        <h3 class="d-inline-block">Database Testing</h3>
        <div>
            <label style="font-size: 13px; font-weight: bold">Test Counts:</label>
            <DxSpinEdit CssClass="d-inline-block"
                        @bind-Value="TestsCount"
                        ShowSpinButtons="false">
            </DxSpinEdit>
        </div>
    </div>
    <DbTest TestTitle="Get Products Category" OnTestRun="@GetCategoryProducts" Enabled="@CanRunTest"/>
    <DbTest TestTitle="Get Product" OnTestRun="@GetProduct" Enabled="@CanRunTest"/>
    <DbTest TestTitle="Get Awaiting Confirmation Orders" OnTestRun="@GetAwaitingConfirmationOrders" Enabled="@CanRunTest"/>
</div>

<DxPopup
    @bind-Visible="@PopupVisible"
    HeaderText="@TestTitle"
    ShowFooter="true"
    Width="1200px">
    <BodyTemplate>
        <ResultsChart TestsResult="@TestsResult"
                      Color="@ChartColor"/>
    </BodyTemplate>
    <FooterContentTemplate>
        <div class="text-center mr-auto ml-auto">
            <h4 class="d-inline-block" style="font-weight: bold; color: crimson">Average: @(TestsResult.Average().ToString("0.00"))</h4>
        </div>
    </FooterContentTemplate>
</DxPopup>

@code {
    int TestsCount { get; set; } = 10;

    bool CanRunTest { get; set; } = true;

    bool PopupVisible { get; set; }

    List<int> TestsResult { get; set; } = new();

    string TestTitle { get; set; } = "";

    Color ChartColor { get; set; }

    private async Task GetCategoryProducts(DbType dbType) {
        CanRunTest = false;
        await InvokeAsync(StateHasChanged);
        var result = await _dbTestingClientService.GetCategoryProducts(TestsCount, dbType);
        TestTitle = result.ActionName + "   " + (dbType is DbType.MongoDb ? "MongoDB" : "SQL Server");
        ChartColor = dbType is DbType.MongoDb ? Color.ForestGreen : Color.CornflowerBlue;
        TestsResult = result.Millis;
        PopupVisible = true;
        CanRunTest = true;
        await InvokeAsync(StateHasChanged);
    }
    
    private async Task GetProduct(DbType dbType) {
        CanRunTest = false;
        await InvokeAsync(StateHasChanged);
        var result = await _dbTestingClientService.GetProduct(TestsCount, dbType);
        TestTitle = result.ActionName + "   " + (dbType is DbType.MongoDb ? "MongoDB" : "SQL Server");
        ChartColor = dbType is DbType.MongoDb ? Color.ForestGreen : Color.CornflowerBlue;
        TestsResult = result.Millis;
        PopupVisible = true;
        CanRunTest = true;
        await InvokeAsync(StateHasChanged);
    }
    
    private async Task GetAwaitingConfirmationOrders(DbType dbType) {
        CanRunTest = false;
        await InvokeAsync(StateHasChanged);
        var result = await _dbTestingClientService.GetAwaitingConfirmationOrders(TestsCount, dbType);
        TestTitle = result.ActionName + "   " + (dbType is DbType.MongoDb ? "MongoDB" : "SQL Server");
        ChartColor = dbType is DbType.MongoDb ? Color.ForestGreen : Color.CornflowerBlue;
        TestsResult = result.Millis;
        PopupVisible = true;
        CanRunTest = true;
        await InvokeAsync(StateHasChanged);
    }

}